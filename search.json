[{"path":"https://stefanlinner.github.io/tidyMC/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 tidyMC authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/articles/tidyMC.html","id":"package-overview","dir":"Articles","previous_headings":"","what":"Package overview","title":"Monte Carlo Simulations made easy and tidy with tidyMC","text":"Monte Carlo simulations aim study properties statistical inference techniques. core, Monte Carlo simulation works application techniques repeatedly drawn samples pre-specified data generating process. tidyMC package aims cover simplify whole workflow running Monte Carlo simulation either academic professional setting. Thus, tidyMC aims provide functions following tasks: Running Monte Carlo simulation user defined function parameter grid using future_mc() Summarizing results (optionally) user defined summary functions using summary.mc() Creating plots Monte Carlo simulation results, can modified user using plot.mc() plot.summary.mc() Creating LaTeX table summarizing results Monte Carlo simulation using tidy_mc_latex() following subsections show can implement tasks using tidyMC package.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/articles/tidyMC.html","id":"installing-tidymc","dir":"Articles","previous_headings":"Package overview","what":"Installing tidyMC","title":"Monte Carlo Simulations made easy and tidy with tidyMC","text":"now, tidyMC package CRAN, thus need download development version GitHub follows: Afterwards can load package: Moreover, following packages used vignette:","code":"# install.packages(\"devtools\") devtools::install_github(\"stefanlinner/tidyMC\") library(tidyMC) # install.packages(\"magrittr\") library(magrittr) # install.packages(\"ggplot2\") library(ggplot2) # install.packages(\"kableExtra\") library(kableExtra)"},{"path":"https://stefanlinner.github.io/tidyMC/articles/tidyMC.html","id":"run-your-first-monte-carlo-simulation-with-future_mc","dir":"Articles","previous_headings":"Package overview > Installing tidyMC","what":"Run your first Monte Carlo Simulation with future_mc()","title":"Monte Carlo Simulations made easy and tidy with tidyMC","text":"future_mc() allows run Monte Carlo simulation user defined function given parameters. first argument future_mc() fun function handles generation data, application method interest evaluation result single repetition parameter combination. future_mc() handles generation loops desired parameter grids repetition Monte Carlo experiment parameter constellations. Consider following example fun note performs required tasks generating data, applying method evaluating results: second argument future_mc() repetitions integer specifying number Monte Carlo iterations. third argument param_list list whose components named parameters fun vary different Monte Carlo Simulation component vector containing desired grid values parameter. Consider following example param_list note components named accordingly parameters ols_test: n inc_x2, respectively: future_mc() takes care creating possible parameter combinations param_list runs Monte Carlo simulation possible combinations. don’t want run Monte Carlo simulation every possible parameter combination can alternatively define param_table data.frame data.table containing parameter combinations interested .... argument can used specify arguments fun contained param_list. arguments held fixed parameter combinations. OLS example arguments b0, b1, b2, sigma2, param_x1, param_x2. Moreover, four formal requirements fun thus ols_test fulfill: arguments fun present param_list scalar values. Note arguments ols_test contained param_list_ols: n inc_x2 scalar values. remaining arguments ols_test allowed take non-scalar values. Every variable used inside fun either defined inside fun given argument ... argument. value returned fun named list. example names returned list b0, b1, b2, sigma2. names returned values arguments contained param_list need different. Moreover, params, repetitions setup names already occupied. Note b0, b1, b2, sigma2 names returned values well names arguments ols_test. However, none arguments contained param_list_ols. add either variables param_list_ols need change name returned value respective variable. recommend even restrict return value fun named list scalars. allows use comfort functions tidyMC package. can see, ols_test. argument parallelisation_plan allows user set parallelisation plan. argument parallelisation_options allows user fine tune functions, furrr::future_map() furrr::furrr_options(). argument seed furrr::furrr_options() can specified parallelisation_options following formal requirements respective documentation. Moreover, user can also decide run Monte Carlo parallel setting parallel = FALSE. construct parallelisation_plan user needs provide list named arguments future::plan. main argument strategy needs provide specific type parallelisation user like use number cores used function. options strategy : multisession, multicore cluster. strongly recommend user read documentation future package detailed instruction set different strategies. default (check = TRUE) future_mc() runs quick check running single test-iteration parameter combination order check possible errors fun. error occurs user receives error message also parameter combinations error occurred: attentive reader might already noticed specified sigma2 = -2 doesn’t make sense, variance error term negative. results failed check parameter combinations, parameter held fixed combination. correct mistake, can run first Monte Carlo simulation: future_mc returns list type mc length 11 consisting tibble (first_mc_ols$output) containing return value fun iteration parameter combination. case first_mc_ols$output contains column output b0, b1, b2, sigma2, well column parameter param_list_ols column containing nice_names parameter combinations. Overall first_mc_ols$output consists 6000 rows, .e., parameter combination 1.000 rows: ols_test return named list scalars, named list non-scalars, first_mc_ols$output contain column output, single column containing named list non-scalars iteration parameter combination. Moreover, first_mc_ols returns much information Monte Carlo simulation can printed dense representation:","code":"# fun ols_test <-    function(b0, b1, b2, n, sigma2, param_x1, param_x2, inc_x2){          # generation of data     x1 <- rnorm(n = n, mean = param_x1[1], sd = param_x1[2])     x2 <- rnorm(n = n,  mean = param_x2[1], sd = param_x2[2])     e <- rnorm(n, sd = sqrt(sigma2))     y <- b0 + b1*x1 + b2*x2 + e          if (inc_x2 == 0){       x2 <- x2 * inc_x2     }          # application of method     estim <- lm(y ~ x1 + x2)          # evaluation of the result for a single repetition and parameter combination     out <- list(b0 = estim$coefficients[1],                 b1 = estim$coefficients[2],                 b2 = estim$coefficients[3],                 sigma2 = var(estim$residuals))     return(out)   } # param_list param_list_ols <-    list(n = c(100, 200, 300), inc_x2 = c(0,1)) set.seed(101) first_mc_ols <- future_mc(   fun = ols_test,    repetitions = 1000,    param_list = param_list_ols,    b0 = 1,    b1 = 4,    b2 = 5,    sigma2 = -2,   param_x1 = c(0,5),   param_x2 = c(0,6),   check = TRUE ) #> Running single test-iteration for each parameter combination... #> Error in future_mc(fun = ols_test, repetitions = 1000, param_list = param_list_ols, :   #>  Function error: NaNs produced  #>  At the parameters: n=100, inc_x2=0  #>    #>  Function error: NaNs produced  #>  At the parameters: n=200, inc_x2=0  #>    #>  Function error: NaNs produced  #>  At the parameters: n=300, inc_x2=0  #>    #>  Function error: NaNs produced  #>  At the parameters: n=100, inc_x2=1  #>    #>  Function error: NaNs produced  #>  At the parameters: n=200, inc_x2=1  #>    #>  Function error: NaNs produced  #>  At the parameters: n=300, inc_x2=1  #> set.seed(101) first_mc_ols <- future_mc(   fun = ols_test,    repetitions = 1000,    param_list = param_list_ols,    b0 = 1,    b1 = 4,    b2 = 5,    sigma2 = 2, # correctly specify sigma2   param_x1 = c(0,5),   param_x2 = c(0,6),   check = TRUE ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:02.656739 first_mc_ols$output #> # A tibble: 6,000 × 7 #>    params              n inc_x2     b0    b1    b2 sigma2 #>    <chr>           <dbl>  <dbl>  <dbl> <dbl> <dbl>  <dbl> #>  1 n=100, inc_x2=0   100      0  1.28   3.38    NA   776. #>  2 n=100, inc_x2=0   100      0 -4.27   3.89    NA   773. #>  3 n=100, inc_x2=0   100      0  5.85   4.36    NA  1130. #>  4 n=100, inc_x2=0   100      0  1.57   4.69    NA  1067. #>  5 n=100, inc_x2=0   100      0 -0.802  3.93    NA   873. #>  6 n=100, inc_x2=0   100      0  1.26   4.44    NA   880. #>  7 n=100, inc_x2=0   100      0  5.01   4.22    NA   852. #>  8 n=100, inc_x2=0   100      0 -1.49   3.99    NA   938. #>  9 n=100, inc_x2=0   100      0  3.07   3.80    NA   779. #> 10 n=100, inc_x2=0   100      0  2.06   3.73    NA   999. #> # ℹ 5,990 more rows first_mc_ols #> Monte Carlo simulation results for the specified function:  #>   #>  function (b0, b1, b2, n, sigma2, param_x1, param_x2, inc_x2)  #> { #>     x1 <- rnorm(n = n, mean = param_x1[1], sd = param_x1[2]) #>     x2 <- rnorm(n = n, mean = param_x2[1], sd = param_x2[2]) #>     e <- rnorm(n, sd = sqrt(sigma2)) #>     y <- b0 + b1 * x1 + b2 * x2 + e #>     if (inc_x2 == 0) { #>         x2 <- x2 * inc_x2 #>     } #>     estim <- lm(y ~ x1 + x2) #>     out <- list(b0 = estim$coefficients[1], b1 = estim$coefficients[2],  #>         b2 = estim$coefficients[3], sigma2 = var(estim$residuals)) #>     return(out) #> }  #>   #>  The following 6 parameter combinations:  #> # A tibble: 6 × 2 #>       n inc_x2 #>   <dbl>  <dbl> #> 1   100      0 #> 2   200      0 #> 3   300      0 #> 4   100      1 #> 5   200      1 #> 6   300      1 #> are each simulated 1000 times.  #>   #>  The Running time was: 00:00:02.656739  #>   #>  Parallel: TRUE  #>   #>  The following parallelisation plan was used:  #> $strategy #> multisession: #> - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame()) #> - tweaked: FALSE #> - call: NULL #> FutureBackend to be launched #>  #>  #>  Seed: TRUE"},{"path":"https://stefanlinner.github.io/tidyMC/articles/tidyMC.html","id":"summarize-your-results-with-summary-mc","dir":"Articles","previous_headings":"Package overview > Installing tidyMC","what":"Summarize your results with summary.mc()","title":"Monte Carlo Simulations made easy and tidy with tidyMC","text":"fun returns named list scalars user can use summary.mc() summarize Monte Carlo results. first argument function object class mc returned future_mc(). next argument sum_funs determines summarizing functions used simulation results. functions can provided combination : parameter combinations resulting param_list, outputs fun. Every specified function can take one argument, vector (length repetitions) every output. present customization options sum_funs stepwise manner. first option summarizing results given just providing mc object summary.mc. case, mean() applied numeric values summary() non-numeric data types. summarizing functions return one numeric value (like mean()) results twofold: First, single scalar result function evaluated using complete output vector returned first element. Second, vector length repetitions numeric results stepwise calculation function’s result across output’s vector. call resulting vector “path” summarizing function. Additionally, save computation time parameter which_path available user wants specify outputs “path” calculated. user needs provide character vector output names’. Moreover, options \"\" (default) \"none\" also available. OLS example since outputs ols_test numeric, returned object named nested list composed four elements named nice_names returned future_mc(). elements lists containing summarized outputs, .e. b0, b1, b2, sigma2. Lastly composed “path” scalar result mean(). nested list structure give idea reach flexibility sum_funs argument allowed , since user can specify function element list. intermediate level customization, user can provide combination summarizing functions every output, used parameter combination. case OLS example, want apply mean() estimated coefficients, want use var() MC results sigma2, sum_funs following structure: Moreover, user can specify function provided takes output vector available argument. Lastly last level customization, nested list named nice_names every element follows structure last example (components named outputs component function) can specified. present example : like reiterate provided summary functions restricted regarding complexity return value. However, path summarized output simulation repetitions returned provided summary functions return single numeric value. Thus, following comfort functions plot.summary.mc() tidy_mc_latex() work specific case.","code":"# Default summary_default <- summary(first_mc_ols) summary_default #> Results for the output b0:  #>    n=100, inc_x2=0: 0.9185223  #>    n=100, inc_x2=1: 1.003477  #>    n=200, inc_x2=0: 1.02396  #>    n=200, inc_x2=1: 1.002091  #>    n=300, inc_x2=0: 1.000223  #>    n=300, inc_x2=1: 1.002196  #>   #>   #> Results for the output b1:  #>    n=100, inc_x2=0: 3.985091  #>    n=100, inc_x2=1: 4.000044  #>    n=200, inc_x2=0: 4.005565  #>    n=200, inc_x2=1: 4.000216  #>    n=300, inc_x2=0: 4.001195  #>    n=300, inc_x2=1: 4.000031  #>   #>   #> Results for the output b2:  #>    n=100, inc_x2=0:  #> [1] NA #>  #>    n=100, inc_x2=1: 5.001864  #>    n=200, inc_x2=0:  #> [1] NA #>  #>    n=200, inc_x2=1: 5.001091  #>    n=300, inc_x2=0:  #> [1] NA #>  #>    n=300, inc_x2=1: 5.000132  #>   #>   #> Results for the output sigma2:  #>    n=100, inc_x2=0: 892.7561  #>    n=100, inc_x2=1: 1.958776  #>    n=200, inc_x2=0: 895.652  #>    n=200, inc_x2=1: 1.982949  #>    n=300, inc_x2=0: 900.6887  #>    n=300, inc_x2=1: 1.983788  #>   #>  str(summary_default[[1]]) #> List of 4 #>  $ b0    :List of 2 #>   ..$ mean          : num 0.919 #>   ..$ mean_over_reps: num [1:1000] 1.278 -1.497 0.954 1.108 0.726 ... #>  $ b1    :List of 2 #>   ..$ mean          : num 3.99 #>   ..$ mean_over_reps: num [1:1000] 3.38 3.63 3.88 4.08 4.05 ... #>  $ b2    :List of 1 #>   ..$ mean: num NA #>  $ sigma2:List of 2 #>   ..$ mean          : num 893 #>   ..$ mean_over_reps: num [1:1000] 776 774 893 936 923 ... # summarizing output for each parameter combination with one combination sum_funs_ols <- list(b0 = mean, b1 = mean , b2 = mean, sigma2 = var) quantile_sum <- function(x) quantile(x, probs = 0.75)  # summarizing output differently for different parameter combinations sum_funs2 <-   list(     list(b0 = quantile_sum, b1 = min, b2 = min, sigma2 = mean),     list(b0 = mean, b1 = quantile_sum, b2 = mean, sigma2 = mean),     list(b0 = median, b1 = median, b2 = median, sigma2 = mean),     list(b0 = max, b1 = max, b2 = max, sigma2 = mean),     list(b0 = min, b1 = min, b2 = min, sigma2 = quantile_sum),     list(b0 = mean, b1 = mean, b2 = quantile_sum, sigma2 = quantile_sum)   ) names(sum_funs2) <- first_mc_ols$nice_names summary_out_param_spec <- summary(first_mc_ols, sum_funs = sum_funs2)"},{"path":"https://stefanlinner.github.io/tidyMC/articles/tidyMC.html","id":"plot-your-monte-carlo-simulation-with-plot-mc-and-plot-summary-mc","dir":"Articles","previous_headings":"Package overview > Installing tidyMC","what":"Plot your Monte Carlo Simulation with plot.mc() and plot.summary.mc()","title":"Monte Carlo Simulations made easy and tidy with tidyMC","text":"fun returns named list scalars user can use plot.mc() generate list objects class gg ggplot2 Monte Carlo results. first argument function object class mc returned future_mc(). Using argument plot user can indicate whether generated plots printed immediately returned list. list contain one plot output fun comparing results different simulation setups. general, plot.mc() generates density plots numeric outputs bar plots non-numeric outputs. example plot b0, b1, b2, sigma2 returned list length four b0, b1, b2, sigma2 numeric outputs plot.mc() return density plots : single list elements class gg ggplot2, can easily customize extend single plots using familiar ggplot2 commands:  creating plots user can also subset setups /like see plots using first_mc_ols$nice_names function argument which_setup, named list parameter_comb. single components list named parameters specified param_list contain vectors specifying values parameters filter . ols example can filter parameters n inc_x2:  Thus, user wants distinct plots every parameter combination, one needs subset plot single setup first_mc_ols$nice_names. Finally, can also plot simulation results several parameter combination one single plot specifying argument join respective first_mc_ols$nice_names:  Please aware one three arguments which_setup, parameter_comb, join can specified time. provided summary functions summary.mc() return single numeric value thus path summarized output simulation repetitions returned, user can use plot.summary.mc() plot paths. first argument function object class summary.mc returned summary.mc(). Just plot.mc(), plot.summary.mc() returns list objects class gg ggplot2. list contain one line plot output fun displaying paths results different simulation setups. arguments plot, which_setup, parameter_comb, join can specified way plot.mc:","code":"mc_ols_plot <- plot(first_mc_ols, plot = FALSE) names(mc_ols_plot) #> [1] \"b0\"     \"b1\"     \"b2\"     \"sigma2\" mc_ols_plot$b1 +    ggplot2::geom_vline(xintercept = 4, col = \"red\") +    ggplot2::theme_minimal() # subsetting by nice_names mc_ols_plot_subset1 <-    plot(first_mc_ols, plot = FALSE, which_setup = first_mc_ols$nice_names[4:6]) #subsetting by parameter values mc_ols_plot_subset2 <-    plot(first_mc_ols, plot = FALSE, parameter_comb = list(inc_x2 = 1))  mc_ols_plot_subset1$sigma2 mc_ols_plot_joint <- plot(first_mc_ols, plot = FALSE,                            join = first_mc_ols$nice_names) mc_ols_plot_joint$b2 #> Warning: Removed 3000 rows containing non-finite outside the scale range #> (`stat_density()`). sum_mc_plot <- plot(summary_default, plot = FALSE) sum_mc_plot$b1 +    ggplot2::geom_vline(xintercept = 100, col = \"red\") +   ggplot2::theme(axis.text.x = element_text(angle = 45,                                              hjust = 0.1,                                              vjust = 0.2)) sum_mc_plot_subset1 <-    plot(summary_default,         plot = FALSE,         which_setup = first_mc_ols$nice_names[4:6])  sum_mc_plot_subset2 <-    plot(summary_default,         plot = FALSE,         parameter_comb = list(inc_x2 = 1))  sum_mc_plot_subset2$b1 sum_mc_plot_joint <-    plot(summary_default, plot = FALSE, join = first_mc_ols$nice_names[4:6])  sum_mc_plot_joint$b1"},{"path":"https://stefanlinner.github.io/tidyMC/articles/tidyMC.html","id":"create-a-latex-table-of-your-results-with-tidy_mc_latex","dir":"Articles","previous_headings":"Package overview > Installing tidyMC","what":"Create a ‘LaTeX’ table of your results with tidy_mc_latex()","title":"Monte Carlo Simulations made easy and tidy with tidyMC","text":"Using tidy_mc_latex user can present results future_mc directly LaTeX document using benefits kableExtra package. first main argument x needed tidy_mc_latex summary.mc object obtained summary.mc(). present results comprehensive manner function requires summarized outputs summary.mc scalar numeric results parameter combinations. case, summarizing function returns one argument presented table NA value. second argument function repetitions_set allows user see certain values “path” summarized results fun. illustrate use MC results OLS example: resulting table composed two panels, corresponds length repetitions_set. columns correspond results summarizing functions b0, b1, b2, sigma2, rows correspond specific combinations parameters provided parameter_list. footnote table shows number repetitions total parameter combinations provided future_mc. Moreover, next three arguments tidy_mc_latex comfort options select results summary.mc depending parameter combinations presented table. one hand, argument which_setup allows user make use nice_names parameter combinations returned object future_mc() subset rows table. hand, argument parameter_comb used directly filter parameters values. argument requires named list, containing vector scalar values parameters filtered . user must provide one arguments time. show make use parameters subset rows table n=100n = 100 incx2=1inc_{x2}=1: user can also subset outputs original function (columns table) using parameter which_out. done using character vector names outputs, e.g. show columns b0 sigma2 user needs set which_out = c(\"b0\", \"sigma2\"). Lastly, providing named list argument kable_options, user can change arguments underlying function kable::kbl(). names list equal names arguments function contents every element also fulfill requirements. provide example list constructed, optimal usage strongly recommend user see documentation kable::kbl() function. allow customization returned object tidy_mc_latex class knitr_kable, therefore user can utilize functions kableExtra package standard tidyverse manner. example:","code":"tidy_mc_latex(   x = summary(first_mc_ols),   repetitions_set = c(10, 1000) ) %>%    print() #> \\begin{table} #>  #> \\caption{\\label{tab:unnamed-chunk-19}Monte Carlo simulations results} #> \\centering #> \\begin{tabular}[t]{cccccc} #> \\toprule #> n & inc_x2 & b0 & b1 & b2 & sigma2\\\\ #> \\midrule #> \\addlinespace[0.3em] #> \\multicolumn{6}{l}{\\textbf{N = 10}}\\\\ #> \\hspace{1em}100 & 0 & 1.354 & 4.043 & NA & 906.484\\\\ #> \\hspace{1em}100 & 1 & 0.989 & 4.011 & 4.999 & 1.915\\\\ #> \\hspace{1em}200 & 0 & 2.326 & 4.156 & NA & 871.074\\\\ #> \\hspace{1em}200 & 1 & 1.025 & 3.996 & 5.002 & 2.015\\\\ #> \\hspace{1em}300 & 0 & 0.083 & 4.006 & NA & 950.222\\\\ #> \\hspace{1em}300 & 1 & 0.989 & 3.997 & 4.997 & 2.058\\\\ #> \\addlinespace[0.3em] #> \\multicolumn{6}{l}{\\textbf{N = 1000}}\\\\ #> \\hspace{1em}100 & 0 & 0.919 & 3.985 & NA & 892.756\\\\ #> \\hspace{1em}100 & 1 & 1.003 & 4.000 & 5.002 & 1.959\\\\ #> \\hspace{1em}200 & 0 & 1.024 & 4.006 & NA & 895.652\\\\ #> \\hspace{1em}200 & 1 & 1.002 & 4.000 & 5.001 & 1.983\\\\ #> \\hspace{1em}300 & 0 & 1.000 & 4.001 & NA & 900.689\\\\ #> \\hspace{1em}300 & 1 & 1.002 & 4.000 & 5.000 & 1.984\\\\ #> \\bottomrule #> \\multicolumn{6}{l}{\\textsuperscript{} Total repetitions = 1000, total parameter}\\\\ #> \\multicolumn{6}{l}{combinations = 6}\\\\ #> \\end{tabular} #> \\end{table} tidy_mc_latex(   x = summary(first_mc_ols),   repetitions_set = c(10, 1000),   which_setup = first_mc_ols$nice_names[1]) %>%    print() #> \\begin{table} #>  #> \\caption{\\label{tab:unnamed-chunk-20}Monte Carlo simulations results} #> \\centering #> \\begin{tabular}[t]{ccccc} #> \\toprule #> n & inc_x2 & b0 & b1 & sigma2\\\\ #> \\midrule #> \\addlinespace[0.3em] #> \\multicolumn{5}{l}{\\textbf{N = 10}}\\\\ #> \\hspace{1em}100 & 0 & 1.354 & 4.043 & 906.484\\\\ #> \\addlinespace[0.3em] #> \\multicolumn{5}{l}{\\textbf{N = 1000}}\\\\ #> \\hspace{1em}100 & 0 & 0.919 & 3.985 & 892.756\\\\ #> \\bottomrule #> \\multicolumn{5}{l}{\\textsuperscript{} Total repetitions = 1000, total}\\\\ #> \\multicolumn{5}{l}{parameter combinations = 6}\\\\ #> \\end{tabular} #> \\end{table}  tidy_mc_latex(   x = summary(first_mc_ols),   repetitions_set = c(10, 1000),   parameter_comb = list(n = 100, inc_x2 = 1)) %>%    print() #> \\begin{table} #>  #> \\caption{\\label{tab:unnamed-chunk-20}Monte Carlo simulations results} #> \\centering #> \\begin{tabular}[t]{cccccc} #> \\toprule #> n & inc_x2 & b0 & b1 & b2 & sigma2\\\\ #> \\midrule #> \\addlinespace[0.3em] #> \\multicolumn{6}{l}{\\textbf{N = 10}}\\\\ #> \\hspace{1em}100 & 1 & 0.989 & 4.011 & 4.999 & 1.915\\\\ #> \\addlinespace[0.3em] #> \\multicolumn{6}{l}{\\textbf{N = 1000}}\\\\ #> \\hspace{1em}100 & 1 & 1.003 & 4.000 & 5.002 & 1.959\\\\ #> \\bottomrule #> \\multicolumn{6}{l}{\\textsuperscript{} Total repetitions = 1000, total parameter}\\\\ #> \\multicolumn{6}{l}{combinations = 6}\\\\ #> \\end{tabular} #> \\end{table} tidy_mc_latex(summary(first_mc_ols),                repetitions_set = c(10, 1000),               kable_options = list(                 col.names = c(\"Number of observations\",                               \"$x_2$ included or not\",                               \"$\\\\beta_0$\", \"$\\\\beta_1$\",                               \"$\\\\beta_2$\", \"$s^2$\"),                  caption = \"Ommited variable bias MC results\"               ) ) %>%   kableExtra::kable_styling(latex_options = \"HOLD_position\") %>%    print() #> \\begin{table}[H] #> \\centering #> \\caption{\\label{tab:unnamed-chunk-21}Ommited variable bias MC results} #> \\centering #> \\begin{tabular}[t]{cccccc} #> \\toprule #> Number of observations & $x_2$ included or not & $\\beta_0$ & $\\beta_1$ & $\\beta_2$ & $s^2$\\\\ #> \\midrule #> \\addlinespace[0.3em] #> \\multicolumn{6}{l}{\\textbf{N = 10}}\\\\ #> \\hspace{1em}100 & 0 & 1.354 & 4.043 & NA & 906.484\\\\ #> \\hspace{1em}100 & 1 & 0.989 & 4.011 & 4.999 & 1.915\\\\ #> \\hspace{1em}200 & 0 & 2.326 & 4.156 & NA & 871.074\\\\ #> \\hspace{1em}200 & 1 & 1.025 & 3.996 & 5.002 & 2.015\\\\ #> \\hspace{1em}300 & 0 & 0.083 & 4.006 & NA & 950.222\\\\ #> \\hspace{1em}300 & 1 & 0.989 & 3.997 & 4.997 & 2.058\\\\ #> \\addlinespace[0.3em] #> \\multicolumn{6}{l}{\\textbf{N = 1000}}\\\\ #> \\hspace{1em}100 & 0 & 0.919 & 3.985 & NA & 892.756\\\\ #> \\hspace{1em}100 & 1 & 1.003 & 4.000 & 5.002 & 1.959\\\\ #> \\hspace{1em}200 & 0 & 1.024 & 4.006 & NA & 895.652\\\\ #> \\hspace{1em}200 & 1 & 1.002 & 4.000 & 5.001 & 1.983\\\\ #> \\hspace{1em}300 & 0 & 1.000 & 4.001 & NA & 900.689\\\\ #> \\hspace{1em}300 & 1 & 1.002 & 4.000 & 5.000 & 1.984\\\\ #> \\bottomrule #> \\multicolumn{6}{l}{\\textsuperscript{} Total repetitions = 1000, total parameter combinations = 6}\\\\ #> \\end{tabular} #> \\end{table}"},{"path":"https://stefanlinner.github.io/tidyMC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Linner. Author, maintainer, copyright holder. Ignacio Moreira Lara. Author. Konstantin Lehmann. Author.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":". Moreira Lara, K. Lehmann S. Linner (2022). \"tidyMC: MonteCarlo Simulations made easy tidy\"","code":"@Manual{,   title = {tidyMC: Monte Carlo Simulations Made Easy and Tidy},   author = {Stefan Linner and Ignacio {Moreira Lara} and Konstantin Lehmann},   year = {2022},   url = {https://github.com/stefanlinner/tidyMC}, }"},{"path":"https://stefanlinner.github.io/tidyMC/index.html","id":"tidymc","dir":"","previous_headings":"","what":"Monte Carlo Simulations Made Easy and Tidy","title":"Monte Carlo Simulations Made Easy and Tidy","text":"Monte Carlo Simulations aim study properties statistical inference techniques. core, Monte Carlo Simulation works application techniques repeatedly drawn samples pre-specified data generating process. tidyMC package aims cover simplify whole workflow running Monte Carlo simulation either academic professional setting. Thus, tidyMC aims provide functions following tasks: Running Monte Carlo Simulation user defined function parameter grid using future_mc() Summarizing results (optionally) user defined summary functions using summary.mc() Creating plots Monte Carlo Simulation results, can modified user using plot.mc() plot.summary.mc() Creating LaTeX table summarizing results Monte Carlo Simulation using tidy_mc_latex()","code":""},{"path":"https://stefanlinner.github.io/tidyMC/index.html","id":"installing-tidymc","dir":"","previous_headings":"","what":"Installing tidyMC","title":"Monte Carlo Simulations Made Easy and Tidy","text":"Install CRAN download development version GitHub follows: Afterwards can load package:","code":"install.packages(\"tidyMC\") # install.packages(\"devtools\") devtools::install_github(\"stefanlinner/tidyMC\", build_vignettes = TRUE) library(tidyMC)"},{"path":"https://stefanlinner.github.io/tidyMC/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Monte Carlo Simulations Made Easy and Tidy","text":"basic example shows solve common problem. elaborate example please see vignette: Run first Monte Carlo Simulation using parameter grid: Summarize results: Plot results / summarized results:       Show results LaTeX table:","code":"library(magrittr) library(ggplot2) library(kableExtra) browseVignettes(package = \"tidyMC\") #> starte den http Server für die Hilfe fertig test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2){      data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)      if (x2 == 5){     stop(\"x2 can't be 5!\")   }      return(list(mean = stat, var = stat_2)) }  param_list <- list(param = seq(from = 0, to = 1, by = 0.5),                    x1 = 1:2)  set.seed(101)  test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2,    check = TRUE ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:06.505337  test_mc #> Monte Carlo simulation results for the specified function:  #>   #>  function (param = 0.1, n = 100, x1 = 1, x2 = 2)  #> { #>     data <- rnorm(n, mean = param) + x1 + x2 #>     stat <- mean(data) #>     stat_2 <- var(data) #>     if (x2 == 5) { #>         stop(\"x2 can't be 5!\") #>     } #>     return(list(mean = stat, var = stat_2)) #> }  #>   #>  The following 6 parameter combinations:  #> # A tibble: 6 × 2 #>   param    x1 #>   <dbl> <int> #> 1   0       1 #> 2   0.5     1 #> 3   1       1 #> 4   0       2 #> 5   0.5     2 #> 6   1       2 #> are each simulated 1000 times.  #>   #>  The Running time was: 00:00:06.505337  #>   #>  Parallel: TRUE  #>   #>  The following parallelisation plan was used:  #> $strategy #> multisession: #> - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame()) #> - tweaked: FALSE #> - call: NULL #>  #>  #>  Seed: TRUE sum_res <- summary(test_mc) sum_res #> Results for the output mean:  #>    param=0, x1=1: 3.015575  #>    param=0, x1=2: 4.003162  #>    param=0.5, x1=1: 3.49393  #>    param=0.5, x1=2: 4.480855  #>    param=1, x1=1: 3.985815  #>    param=1, x1=2: 4.994084  #>   #>   #> Results for the output var:  #>    param=0, x1=1: 0.9968712  #>    param=0, x1=2: 1.026523  #>    param=0.5, x1=1: 0.9933278  #>    param=0.5, x1=2: 0.9997529  #>    param=1, x1=1: 0.9979682  #>    param=1, x1=2: 1.005633  #>   #> returned_plot1 <- plot(test_mc, plot = FALSE)  returned_plot1$mean +  ggplot2::theme_minimal() +  ggplot2::geom_vline(xintercept = 3) returned_plot2 <- plot(test_mc, which_setup = test_mc$nice_names[1:2], plot = FALSE) returned_plot2$mean returned_plot3 <- plot(test_mc, join = test_mc$nice_names[1:2], plot = FALSE) returned_plot3$mean returned_plot1 <- plot(summary(test_mc), plot = FALSE)  returned_plot1$mean +   ggplot2::theme_minimal() returned_plot2 <- plot(summary(test_mc), which_setup = test_mc$nice_names[1:2], plot = FALSE)  returned_plot2$mean returned_plot3 <- plot(summary(test_mc), join = test_mc$nice_names[1:2], plot = FALSE) returned_plot3$mean tidy_mc_latex(summary(test_mc)) %>%    print() #> \\begin{table} #>  #> \\caption{\\label{tab:unnamed-chunk-10}Monte Carlo simulations results} #> \\centering #> \\begin{tabular}[t]{cccc} #> \\toprule #> param & x1 & mean & var\\\\ #> \\midrule #> 0.0 & 1 & 3.016 & 0.997\\\\ #> 0.0 & 2 & 4.003 & 1.027\\\\ #> 0.5 & 1 & 3.494 & 0.993\\\\ #> 0.5 & 2 & 4.481 & 1.000\\\\ #> 1.0 & 1 & 3.986 & 0.998\\\\ #> \\addlinespace #> 1.0 & 2 & 4.994 & 1.006\\\\ #> \\bottomrule #> \\multicolumn{4}{l}{\\textsuperscript{} Total repetitions = 1000,}\\\\ #> \\multicolumn{4}{l}{total parameter combinations}\\\\ #> \\multicolumn{4}{l}{= 6}\\\\ #> \\end{tabular} #> \\end{table}  tidy_mc_latex(     summary(test_mc),     repetitions_set = c(10,1000),     which_out = \"mean\",     kable_options = list(caption = \"Mean MCS results\") ) %>%    print() #> \\begin{table} #>  #> \\caption{\\label{tab:unnamed-chunk-10}Mean MCS results} #> \\centering #> \\begin{tabular}[t]{ccc} #> \\toprule #> param & x1 & mean\\\\ #> \\midrule #> \\addlinespace[0.3em] #> \\multicolumn{3}{l}{\\textbf{N = 10}}\\\\ #> \\hspace{1em}0.0 & 1 & 3.193\\\\ #> \\hspace{1em}0.0 & 2 & 3.810\\\\ #> \\hspace{1em}0.5 & 1 & 3.434\\\\ #> \\hspace{1em}0.5 & 2 & 4.550\\\\ #> \\hspace{1em}1.0 & 1 & 4.156\\\\ #> \\hspace{1em}1.0 & 2 & 5.030\\\\ #> \\addlinespace[0.3em] #> \\multicolumn{3}{l}{\\textbf{N = 1000}}\\\\ #> \\hspace{1em}0.0 & 1 & 3.016\\\\ #> \\hspace{1em}0.0 & 2 & 4.003\\\\ #> \\hspace{1em}0.5 & 1 & 3.494\\\\ #> \\hspace{1em}0.5 & 2 & 4.481\\\\ #> \\hspace{1em}1.0 & 1 & 3.986\\\\ #> \\hspace{1em}1.0 & 2 & 4.994\\\\ #> \\bottomrule #> \\multicolumn{3}{l}{\\textsuperscript{} Total repetitions =}\\\\ #> \\multicolumn{3}{l}{1000, total}\\\\ #> \\multicolumn{3}{l}{parameter}\\\\ #> \\multicolumn{3}{l}{combinations = 6}\\\\ #> \\end{tabular} #> \\end{table}"},{"path":"https://stefanlinner.github.io/tidyMC/reference/future_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Parallelized Monte Carlo Simulation — future_mc","title":"Run a Parallelized Monte Carlo Simulation — future_mc","text":"future_mc runs Monte Carlo simulation study user-specified function desired parameter grids.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/future_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Parallelized Monte Carlo Simulation — future_mc","text":"","code":"future_mc(   fun,   repetitions,   param_list = NULL,   param_table = NULL,   parallelisation_plan = list(strategy = future::multisession),   parallelisation_options = list(),   check = TRUE,   parallel = TRUE,   ... )"},{"path":"https://stefanlinner.github.io/tidyMC/reference/future_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Parallelized Monte Carlo Simulation — future_mc","text":"fun function evaluated. See details. repetitions integer specifies number Monte Carlo iterations param_list list whose components named parameters fun vary different Monte Carlo Simulations. component vector containing desired grid values parameter. Monte Carlo Simulation run possible combinations parameter list. param_table Alternative param_list. data.frame data.table containing pre-built grid values, columns parameters fun vary different Monte Carlo Simulations. useful want run Monte Carlo Simulation subset possible combinations. parallelisation_plan list whose components named possible parameters future::plan() specifying parallelisation plan used Monte Carlo Simulation. Default strategy = multisession. parallelisation_options list whose components named possible parameters furrr::furrr_options() fine tuning functions, furrr::future_map(). Default seed = TRUE long specified differently order assure reproducibility. check Boolean specifies whether single test-iteration run parameter combination order check possible occuring errors fun. Default TRUE. parallel Boolean specifies whether Monte Carlo simulation run parallel. Default TRUE. ... Additional parameters passed fun part parameter grid.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/future_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Parallelized Monte Carlo Simulation — future_mc","text":"list type mc containing following objects: output: tibble containing return value fun iteration parameter combination parameter: tibble shows different parameter combinations simple_output: boolean value indicating whether return value fun named list scalars nice_names: character vector containing \"nice names\" different parameter setups calculation_time: calculation time needed run whole Monte Carlo Simulation n_results: numeric value indicating number results seed: value used parameter seed furrr::furrr_options() fun: user-defined function fun repetitions: number repetitions run parameter setup parallel: Boolean whether Monte Carlo Simulation run parallel plan: list specified parallelisation plan via future::plan()","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/future_mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a Parallelized Monte Carlo Simulation — future_mc","text":"user defined function fun handles (specified) generation data, application method interest evaluation result single repetition parameter combination. future_mc handles generation loops desired parameter grids repetition Monte Carlo experiment parameter constellations. four formal requirements fun fulfill: arguments fun present param_list need scalar values. value returned fun named list must components iteration parameter combination. names returned values arguments contained param_list need different. Moreover, \"params\", \"repetitions\" \"setup\" Every variable used inside fun either defined inside fun given argument ... argument. particular, fun use variables defined global environment. order use comfort functions plot.mc(), summary.mc(), plot.summary.mc(), tidy_mc_latex() value returned fun named list scalars.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/future_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a Parallelized Monte Carlo Simulation — future_mc","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2) {   data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5) {     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(   param = seq(from = 0, to = 1, by = 0.5),   x1 = 1:2 )  set.seed(101) test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.847873"},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a Monte Carlo Simulation — plot.mc","title":"Plot the results of a Monte Carlo Simulation — plot.mc","text":"Plot density plots numeric results bar plots non-numeric results Monte Carlo Simulation run future_mc().","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a Monte Carlo Simulation — plot.mc","text":"","code":"# S3 method for class 'mc' plot(   x,   join = NULL,   which_setup = NULL,   parameter_comb = NULL,   plot = TRUE,   ... )"},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a Monte Carlo Simulation — plot.mc","text":"x object class mc, holds simple_output = TRUE. See value future_mc(). join character vector containing nice_names different parameter combinations (returned future_mc()), plotted together. Default: parameter combination plotted distinctly. which_setup character vector containing nice_names different parameter combinations (returned future_mc()), plotted. Default: parameter combinations plotted. parameter_comb Alternative which_setup. named list whose components named () parameters param_list future_mc() component vector containing values parameters filter . Default: parameter combinations plotted. plot Boolean specifies whether plots printed calling function . Default: TRUE ... ignored","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a Monte Carlo Simulation — plot.mc","text":"list whose components named outputs fun component contains object class ggplot gg can plotted modified ggplot2::ggplot2 functions.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a Monte Carlo Simulation — plot.mc","text":"one arguments join, which_setup, paramter_comb can specified one time.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a Monte Carlo Simulation — plot.mc","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2){    data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5){     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(param = seq(from = 0, to = 1, by = 0.5),                    x1 = 1:2)  set.seed(101) test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.853826  returned_plot1 <- plot(test_mc)    returned_plot1$mean +  ggplot2::theme_minimal() +  ggplot2::geom_vline(xintercept = 3)   returned_plot2 <- plot(test_mc, which_setup = test_mc$nice_names[1:2], plot = FALSE) returned_plot2$mean   returned_plot3 <- plot(test_mc, join = test_mc$nice_names[1:2], plot = FALSE) returned_plot3$mean"},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.summary.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","title":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","text":"Plot line plots path summarized output simulation repetitions Monte Carlo simulation run future_mc() summarized summary.mc()","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.summary.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","text":"","code":"# S3 method for class 'summary.mc' plot(   x,   join = NULL,   which_setup = NULL,   parameter_comb = NULL,   plot = TRUE,   ... )"},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.summary.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","text":"x object class summary.mc. restrictions see details. join character vector containing nice_names different parameter combinations (returned future_mc()), plotted together. Default: parameter combination plotted distinct. which_setup character vector containing nice_names different parameter combinations (returned future_mc()), plotted. Default: parameter combinations plotted. parameter_comb Alternative which_setup. named list whose components named () parameters param_list future_mc() component vector containing values parameters filter . Default: parameter combinations plotted. plot Boolean specifies whether plots printed calling function . Default: TRUE ... additional arguments passed callies.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.summary.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","text":"list whose components named outputs fun component contains object class ggplot gg can plotted modified ggplot2::ggplot2 functions.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.summary.mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","text":"one arguments join, which_setup, paramter_comb can specified time. plot created (output - parameter combination)-pairs summary.mc() function provided sum_funs returns single numeric value output included which_path.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/plot.summary.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the summarized results of a Monte Carlo Simulation — plot.summary.mc","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2){    data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5){     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(param = seq(from = 0, to = 1, by = 0.5),                    x1 = 1:2)  set.seed(101) test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.899154  returned_plot1 <- plot(summary(test_mc))    returned_plot1$mean +  ggplot2::theme_minimal()   returned_plot2 <- plot(summary(test_mc), which_setup = test_mc$nice_names[1:2], plot = FALSE) returned_plot2$mean   returned_plot3 <- plot(summary(test_mc), join = test_mc$nice_names[1:2], plot = FALSE) returned_plot3$mean"},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results of a Monte Carlo Simulation — print.mc","title":"Print the results of a Monte Carlo Simulation — print.mc","text":"Print results Monte Carlo Simulation run future_mc()","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results of a Monte Carlo Simulation — print.mc","text":"","code":"# S3 method for class 'mc' print(x, ...)"},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results of a Monte Carlo Simulation — print.mc","text":"x object class mc. ... ignored","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the results of a Monte Carlo Simulation — print.mc","text":"print shows complete representation run Monte Carlo Simulation","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the results of a Monte Carlo Simulation — print.mc","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2){    data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5){     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(param = seq(from = 0, to = 1, by = 0.5),                    x1 = 1:2)  set.seed(101) test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.828977  test_mc #> Monte Carlo simulation results for the specified function:  #>   #>  function (param = 0.1, n = 100, x1 = 1, x2 = 2)  #> { #>     data <- rnorm(n, mean = param) + x1 + x2 #>     stat <- mean(data) #>     stat_2 <- var(data) #>     if (x2 == 5) { #>         stop(\"x2 can't be 5!\") #>     } #>     return(list(mean = stat, var = stat_2)) #> }  #>   #>  The following 6 parameter combinations:  #> # A tibble: 6 × 2 #>   param    x1 #>   <dbl> <int> #> 1   0       1 #> 2   0.5     1 #> 3   1       1 #> 4   0       2 #> 5   0.5     2 #> 6   1       2 #> are each simulated 1000 times.  #>   #>  The Running time was: 00:00:00.828977  #>   #>  Parallel: TRUE  #>   #>  The following parallelisation plan was used:  #> $strategy #> multisession: #> - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame()) #> - tweaked: FALSE #> - call: NULL #> FutureBackend to be launched #>  #>  #>  Seed: TRUE"},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.summary.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summarized results of a Monte Carlo Simulation — print.summary.mc","title":"Print the summarized results of a Monte Carlo Simulation — print.summary.mc","text":"Print summarized results Monte Carlo Simulation run future_mc() summarized summary.mc()","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.summary.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summarized results of a Monte Carlo Simulation — print.summary.mc","text":"","code":"# S3 method for class 'summary.mc' print(x, ...)"},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.summary.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summarized results of a Monte Carlo Simulation — print.summary.mc","text":"x object class summary.mc ... ignored","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.summary.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summarized results of a Monte Carlo Simulation — print.summary.mc","text":"print shows nice representation summarized results Monte Carlo Simulation","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/print.summary.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the summarized results of a Monte Carlo Simulation — print.summary.mc","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2){    data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5){     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(param = seq(from = 0, to = 1, by = 0.5),                    x1 = 1:2)  set.seed(101) test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.834898  summary(test_mc) #> Results for the output mean:  #>    param=0, x1=1: 3.015575  #>    param=0, x1=2: 4.003162  #>    param=0.5, x1=1: 3.49393  #>    param=0.5, x1=2: 4.480855  #>    param=1, x1=1: 3.985815  #>    param=1, x1=2: 4.994084  #>   #>   #> Results for the output var:  #>    param=0, x1=1: 0.9968712  #>    param=0, x1=2: 1.026523  #>    param=0.5, x1=1: 0.9933278  #>    param=0.5, x1=2: 0.9997529  #>    param=1, x1=1: 0.9979682  #>    param=1, x1=2: 1.005633  #>   #>"},{"path":"https://stefanlinner.github.io/tidyMC/reference/summary.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the Results of a Monte Carlo Simulation — summary.mc","title":"Summarize the Results of a Monte Carlo Simulation — summary.mc","text":"Summarize results Monte Carlo Simulation run future_mc() (optionally) user-defined summary functions.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/summary.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the Results of a Monte Carlo Simulation — summary.mc","text":"","code":"# S3 method for class 'mc' summary(object, sum_funs = NULL, which_path = \"all\", ...)"},{"path":"https://stefanlinner.github.io/tidyMC/reference/summary.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the Results of a Monte Carlo Simulation — summary.mc","text":"object object class mc, holds simple_output = TRUE. See value future_mc(). sum_funs named (nested) list containing summary functions. See details. which_path character vector containing names () named outputs (names returned list fun future_mc()), return \"path\" stepwise calculation result summary function. Alternatively, \"\" \"none\" can used return either path none numeric outputs. Default: \"\". ... Ignored","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/summary.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the Results of a Monte Carlo Simulation — summary.mc","text":"list type summary.mc containing result summary functions simulation results respective output parameter combination. provided summary functions return single numeric value, path summarized output (contained which_path) simulation repetitions also returned.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/summary.mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize the Results of a Monte Carlo Simulation — summary.mc","text":"order use summary(), output future_mc() \"simple\", case return value fun named list scalars. returned value fun named list complex data structures, summary() used. sum_funs user can define (different) functions summarize simulation results output (return values fun future_mc()) parameter combination. Thus, functions inside sum_funs take one argument, output vector (length repetitions) one output one specific parameter combination. default summary functions base::mean() numeric outputs base::summary() outputs non-numeric data types. user can define summary functions supplying named (nested) list sum_funs. functions provided output return one numeric value results twofold: first, single scalar result function evaluating whole output vector. Second, \"path\" length repetitions stepwise calculation function's result across output vector (assumed output contained which_path). user wants summarize simulation results respective output way parameter combination, list whose components named outputs (names returned list fun future_mc()) supplied component function takes vector results one output main argument. user wants summarize simulation results respective output differently different parameter combinations, nested list supplied. components outer list must equal length naming nice_names parameter combinations (see value future_mc()) component another list (inner list). components inner list defined way (components named outputs component function). provided summary functions restricted regarding complexity return value. However, path summarized output simulation repetitions returned provided summary functions return single numeric value (output contained which_path). Thus, plot.summary.mc() work specific case.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/summary.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the Results of a Monte Carlo Simulation — summary.mc","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2){    data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5){     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(param = seq(from = 0, to = 1, by = 0.5),                    x1 = 1:2)  set.seed(101) test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.79341  summary(test_mc) #> Results for the output mean:  #>    param=0, x1=1: 3.015575  #>    param=0, x1=2: 4.003162  #>    param=0.5, x1=1: 3.49393  #>    param=0.5, x1=2: 4.480855  #>    param=1, x1=1: 3.985815  #>    param=1, x1=2: 4.994084  #>   #>   #> Results for the output var:  #>    param=0, x1=1: 0.9968712  #>    param=0, x1=2: 1.026523  #>    param=0.5, x1=1: 0.9933278  #>    param=0.5, x1=2: 0.9997529  #>    param=1, x1=1: 0.9979682  #>    param=1, x1=2: 1.005633  #>   #>   summary(test_mc, sum_funs = list(mean = mean, var = sd)) #> Results for the output mean:  #>    param=0, x1=1: 3.015575  #>    param=0, x1=2: 4.003162  #>    param=0.5, x1=1: 3.49393  #>    param=0.5, x1=2: 4.480855  #>    param=1, x1=1: 3.985815  #>    param=1, x1=2: 4.994084  #>   #>   #> Results for the output var:  #>    param=0, x1=1: 0.4804107  #>    param=0, x1=2: 0.4727596  #>    param=0.5, x1=1: 0.456396  #>    param=0.5, x1=2: 0.4759277  #>    param=1, x1=1: 0.4799977  #>    param=1, x1=2: 0.4821494  #>   #>    sum_funcs <- list(   list(     mean = mean, var = sd   ),   list(     mean = mean, var = summary   ),   list(     mean = max, var = min   ),   list(     mean = mean, var = sd   ),   list(     mean = mean, var = summary   ),   list(     mean = max, var = min   ) )  names(sum_funcs) <- test_mc$nice_names  summary(test_mc, sum_funs = sum_funcs) #> Results for the output mean:  #>    param=0, x1=1: 3.015575  #>    param=0, x1=2: 4.003162  #>    param=0.5, x1=1: 4.517579  #>    param=0.5, x1=2: 4.480855  #>    param=1, x1=1: 3.985815  #>    param=1, x1=2: 6.275247  #>   #>   #> Results for the output var:  #>    param=0, x1=1: 0.4804107  #>    param=0, x1=2:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.1363  0.6783  0.9458  1.0265  1.2878  2.6312  #>  #>    param=0.5, x1=1: 0.1521897  #>    param=0.5, x1=2: 0.4759277  #>    param=1, x1=1:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.08217 0.64574 0.91530 0.99797 1.25562 3.45381  #>  #>    param=1, x1=2: 0.1308038  #>   #>"},{"path":"https://stefanlinner.github.io/tidyMC/reference/tidy_mc_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","title":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","text":"Create 'LaTeX' table containing summarized results Monte Carlo simulation run future_mc() summarized summary.mc().","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/tidy_mc_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","text":"","code":"tidy_mc_latex(   x,   repetitions_set = NULL,   which_setup = NULL,   parameter_comb = NULL,   which_out = NULL,   kable_options = NULL )"},{"path":"https://stefanlinner.github.io/tidyMC/reference/tidy_mc_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","text":"x object class summary.mc. restrictions see details. repetitions_set vector integers specifying repetitions summarized results displayed table. Default: argument repetitions future_mc(), means summarized results last repetition displayed table. which_setup character vector containing nice_names different parameter combinations (returned future_mc()), presented table. Default: parameter combinations presented. parameter_comb Alternative which_setup. named list whose components named () parameters param_list future_mc(). component vector containing values parameters filtered . Default: parameter combinations presented. which_out character vector containing names () named outputs (names returned list fun future_mc()), displayed table. Default: outputs displayed. kable_options list whose components named possible parameters kableExtra::kbl() customizing generated table.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/tidy_mc_latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","text":"object class knitr_kable can modified functions kableExtra::kableExtra package returned.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/tidy_mc_latex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","text":"one arguments which_setup parameter_comb can specified one time. (output - parameter combination)-pairs summary function specified sum_funs argument summary.mc() returns single scalar value appear non-NA values 'LaTeX' table. specific output summarized functions return single numeric value parameter combinations, output discarded table. Similarly, specific parameter combination fun outputs summarized functions return single numeric value, parameter combination discarded well. summary, outputs must summarized functions return just one numeric value.","code":""},{"path":"https://stefanlinner.github.io/tidyMC/reference/tidy_mc_latex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'LaTeX' table with the summarized results of a Monte Carlo Simulation — tidy_mc_latex","text":"","code":"test_func <- function(param = 0.1, n = 100, x1 = 1, x2 = 2) {   data <- rnorm(n, mean = param) + x1 + x2   stat <- mean(data)   stat_2 <- var(data)    if (x2 == 5) {     stop(\"x2 can't be 5!\")   }    return(list(mean = stat, var = stat_2)) }  param_list <- list(   param = seq(from = 0, to = 1, by = 0.5),   x1 = 1:2 )  test_mc <- future_mc(   fun = test_func,   repetitions = 1000,   param_list = param_list,   n = 10,   x2 = 2 ) #> Running single test-iteration for each parameter combination... #>  #>  Test-run successfull: No errors occurred! #> Running whole simulation: Overall 6 parameter combinations are simulated ... #>  #>  Simulation was successfull! #>  Running time: 00:00:00.836919  tidy_mc_latex(summary(test_mc)) #> \\begin{table} #>  #> \\caption{Monte Carlo simulations results} #> \\centering #> \\begin{tabular}[t]{cccc} #> \\toprule #> param & x1 & mean & var\\\\ #> \\midrule #> 0.0 & 1 & 3.009 & 1.003\\\\ #> 0.0 & 2 & 4.006 & 0.987\\\\ #> 0.5 & 1 & 3.489 & 0.998\\\\ #> 0.5 & 2 & 4.514 & 1.001\\\\ #> 1.0 & 1 & 3.980 & 0.996\\\\ #> \\addlinespace #> 1.0 & 2 & 4.996 & 1.020\\\\ #> \\bottomrule #> \\multicolumn{4}{l}{\\textsuperscript{} Total repetitions = 1000,}\\\\ #> \\multicolumn{4}{l}{total parameter combinations}\\\\ #> \\multicolumn{4}{l}{= 6}\\\\ #> \\end{tabular} #> \\end{table}  set.seed(101) tidy_mc_latex(   summary(test_mc),   repetitions_set = c(10, 1000),   which_out = \"mean\",   kable_options = list(caption = \"Mean MCS results\") ) #> \\begin{table} #>  #> \\caption{Mean MCS results} #> \\centering #> \\begin{tabular}[t]{ccc} #> \\toprule #> param & x1 & mean\\\\ #> \\midrule #> \\addlinespace[0.3em] #> \\multicolumn{3}{l}{\\textbf{N = 10}}\\\\ #> \\hspace{1em}0.0 & 1 & 3.048\\\\ #> \\hspace{1em}0.0 & 2 & 3.867\\\\ #> \\hspace{1em}0.5 & 1 & 3.405\\\\ #> \\hspace{1em}0.5 & 2 & 4.586\\\\ #> \\hspace{1em}1.0 & 1 & 3.988\\\\ #> \\hspace{1em}1.0 & 2 & 5.167\\\\ #> \\addlinespace[0.3em] #> \\multicolumn{3}{l}{\\textbf{N = 1000}}\\\\ #> \\hspace{1em}0.0 & 1 & 3.009\\\\ #> \\hspace{1em}0.0 & 2 & 4.006\\\\ #> \\hspace{1em}0.5 & 1 & 3.489\\\\ #> \\hspace{1em}0.5 & 2 & 4.514\\\\ #> \\hspace{1em}1.0 & 1 & 3.980\\\\ #> \\hspace{1em}1.0 & 2 & 4.996\\\\ #> \\bottomrule #> \\multicolumn{3}{l}{\\textsuperscript{} Total repetitions =}\\\\ #> \\multicolumn{3}{l}{1000, total}\\\\ #> \\multicolumn{3}{l}{parameter}\\\\ #> \\multicolumn{3}{l}{combinations = 6}\\\\ #> \\end{tabular} #> \\end{table}"}]
